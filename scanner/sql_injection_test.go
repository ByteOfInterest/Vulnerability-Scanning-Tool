package scanner

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"strings"
)

// TestSQLInjectionScannerSuccess tests if the SQLInjectionScanner can detect a vulnerability
func TestSQLInjectionScannerSuccess(t *testing.T) {
    scanner := SQLInjectionScanner{}
    headers := make(map[string]string)
    
    // Simulate an endpoint that would return an SQL error response or delay
    mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if strings.Contains(r.URL.Query().Get("input"), "' OR '1'='1") {
            http.Error(w, "syntax error", http.StatusInternalServerError)
        }
    }))
    defer mockServer.Close()

    vulnDetails, vulnFound := scanner.Scan(mockServer.URL, headers)

    if !vulnFound {
        t.Errorf("Expected SQL Injection vulnerability to be detected, but it wasn't.")
    }

    if vulnDetails.Type != "SQL Injection" {
        t.Errorf("Expected vulnerability type to be 'SQL Injection', got: %s", vulnDetails.Type)
    }

    expectedEndpoint := mockServer.URL + "?input=' OR '1'='1'"
    if vulnDetails.Endpoint != expectedEndpoint {
        t.Errorf("Expected endpoint to be '%s', got: %s", expectedEndpoint, vulnDetails.Endpoint)
    }

    expectedPayload := "' OR '1'='1'"
    if vulnDetails.Payload != expectedPayload {
        t.Errorf("Expected payload to be '%s', got: %s", expectedPayload, vulnDetails.Payload)
    }
}
