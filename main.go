package main

import (
	"fmt"
	"os"
	"Vulnerability-Scanning-Tool/config"
	"Vulnerability-Scanning-Tool/scanner"
)

type ScanResult struct {
	Target         string
	Vulnerabilities []string
}

func main() {
	// Load configuration from config.json
	config, err := config.LoadConfig("config.json")
	if err != nil {
		fmt.Println("Error loading config:", err)
		return
	}

	// All scanners used
	scanners := []scanner.VulnerabilityScanner{
		scanner.SQLInjectionScanner{},
		scanner.XSSScanner{},
		scanner.CSRFScanner{},
		// Add more scanners if needed
	}

	var scanResults []ScanResult

	// Loop through each target and check for vulnerabilities
	for _, target := range config.Targets {
		fmt.Println("Scanning target:", target)
		vulnerabilities := []string{}

		for _, s := range scanners {
			if s.Scan(target, config.Headers) {
				vulnerabilityType := fmt.Sprintf("%T", s)
				vulnerabilities = append(vulnerabilities, vulnerabilityType)
				fmt.Println("Vulnerability detected at:", target)
			}
		}

		// Store the result for this target
		if len(vulnerabilities) > 0 {
			result := ScanResult{Target: target, Vulnerabilities: vulnerabilities}
			scanResults = append(scanResults, result)
		}
	}

	// Generate the report
	fmt.Println("Scan completed. Generating report in Format:", config.ReportFormat)
	generateReport(scanResults)
}

// Function to generate the report in txt format
func generateReport(results []ScanResult) {
	file, err := os.Create("scan_report.txt")
	if err != nil {
		fmt.Println("Error creating report file:", err)
		return
	}
	defer file.Close()

	for _, result := range results {
		file.WriteString(fmt.Sprintf("Target: %s\n", result.Target))
		file.WriteString("Vulnerabilities Found:\n")
		for _, vuln := range result.Vulnerabilities {
			file.WriteString(fmt.Sprintf("- %s\n", vuln))
		}
		file.WriteString("\n")
	}

	fmt.Println("Report generated: scan_report.txt")
}
