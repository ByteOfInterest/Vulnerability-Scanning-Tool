package scanner

import (
	"fmt"
	"io"
	"net/http"
	"strings"
)

// XSSScanner checks for Cross-Site Scripting vulnerabilities.
type XSSScanner struct{}

// Scan performs XSS scanning on the target
func (x XSSScanner) Scan(target string, headers map[string]string) bool {
	// XSS payload to test for reflected XSS
	payload := "<script>alert('XSS')</script>"
	maliciousURL := target + "?input=" + payload

	// Create the HTTP GET request
	req, _ := http.NewRequest("GET", maliciousURL, nil)

	// Add headers from the configuration
	for key, value := range headers {
		req.Header.Add(key, value)
	}

	// Send the HTTP request
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error making request:", err)
		return false
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Error reading response body:", err)
		return false
	}

	// Check if the XSS payload is reflected in the response
	if strings.Contains(string(body), payload) {
		fmt.Println("XSS vulnerability found!")
		return true
	}

	// No XSS vulnerability found
	return false
}
