package main

import (
	"Vulnerability-Scanning-Tool/config"
	"Vulnerability-Scanning-Tool/scanner"
	"fmt"
	"os"
	"time"
)

type ScanResult struct {
	Target          string
	Vulnerabilities []scanner.VulnerabilityDetails
}

func main() {
	// Load configuration from config.json
	cfg, err := config.LoadConfig("config.json")
	if err != nil {
		fmt.Println("Error loading config:", err)
		return
	}

	// Initialize all scanners used
	scanners := []scanner.VulnerabilityScanner{
		&scanner.SQLInjectionScanner{}, // Use pointer here
		&scanner.XSSScanner{},          // Use pointer here
		&scanner.CSRFScanner{},         // Use pointer here
		// Add more scanners here
	}

	// Loop through each target and check for vulnerabilities
	for _, target := range cfg.Targets {
		fmt.Println("Scanning target:", target)

		for _, s := range scanners {
			// Scan the target with each scanner
			_, _ = s.Scan(target, cfg.Headers) // Handle returned values if needed
		}
	}

	// Retrieve and process collected vulnerabilities
	vulnerabilities := scanner.GetVulnerabilities()

	// Log the number of vulnerabilities detected
	fmt.Printf("Number of vulnerabilities detected: %d\n", len(vulnerabilities))

	// Generate the report
	fmt.Println("Scan completed. Generating report in format:", cfg.ReportFormat)
	generateReport(vulnerabilities)


	// Generate the report
	fmt.Println("Scan completed. Generating report in format:", cfg.ReportFormat)
	generateReport(vulnerabilities)
}

// Function to generate the report in txt format
func generateReport(vulnerabilities []scanner.VulnerabilityDetails) {
	file, err := os.Create("scan_report.txt")
	if err != nil {
		fmt.Println("Error creating report file:", err)
		return
	}
	defer file.Close()

	if len(vulnerabilities) == 0 {
		file.WriteString("No vulnerabilities detected.\n")
		fmt.Println("No vulnerabilities detected.")
		return
	}

	for _, vuln := range vulnerabilities {
		_, err := file.WriteString(fmt.Sprintf("Target: %s\n", vuln.Endpoint))
		if err != nil {
			fmt.Println("Error writing to report file:", err)
			return
		}
		_, err = file.WriteString(fmt.Sprintf("  Type: %s\n", vuln.Type))
		if err != nil {
			fmt.Println("Error writing to report file:", err)
			return
		}
		_, err = file.WriteString(fmt.Sprintf("  Detected at: %s\n", vuln.DetectedAt.Format(time.RFC3339)))
		if err != nil {
			fmt.Println("Error writing to report file:", err)
			return
		}
		_, err = file.WriteString(fmt.Sprintf("  Payload: %s\n", vuln.Payload))
		if err != nil {
			fmt.Println("Error writing to report file:", err)
			return
		}
		_, err = file.WriteString(fmt.Sprintf("  Suggestion: %s\n", vuln.Suggestion))
		if err != nil {
			fmt.Println("Error writing to report file:", err)
			return
		}
		_, err = file.WriteString("\n")
		if err != nil {
			fmt.Println("Error writing to report file:", err)
			return
		}
	}

	fmt.Println("Report generated: scan_report.txt")
}

