package scanner

import (
	"net/http"
	"strings"
	"io"
	"fmt"
	"time"
)

// DirectoryTraversalScanner checks for directory traversal vulnerabilities.
type DirectoryTraversalScanner struct{}

// Scan performs directory traversal scanning on the target and returns vulnerability details
func (d DirectoryTraversalScanner) Scan(target string, headers map[string]string, payload string) (VulnerabilityDetails, bool) {
	maliciousURL := target + "/file?path=" + payload
	req, _ := http.NewRequest("GET", maliciousURL, nil)

	// Add headers
	for key, value := range headers {
		req.Header.Add(key, value)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return VulnerabilityDetails{}, false
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	// Check for signs of sensitive files
	if strings.Contains(string(body), "root:x:0:0") || strings.Contains(string(body), "[boot loader]") {
		// Vulnerability detected, return details
		vulnDetails := VulnerabilityDetails{
			Type:       "Directory Traversal",
			Endpoint:   maliciousURL,
			Payload:    payload,
			DetectedAt: time.Now(),
			Suggestion: "Implement proper input validation to prevent directory traversal attacks. Avoid directly handling user-supplied file paths.",
		}
		fmt.Println("Directory Traversal vulnerability found at:", maliciousURL)
		return vulnDetails, true
	}

	return VulnerabilityDetails{}, false
}
