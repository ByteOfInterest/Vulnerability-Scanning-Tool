package scanner

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestSQLInjectionScannerSuccess(t *testing.T) {
	scanner := SQLInjectionScanner{}
	headers := make(map[string]string)

	// Mock the HTTP server
	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		input := r.URL.Query().Get("input")
		if input == "' OR '1'='1" {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write([]byte("SQL syntax error"))
		} else {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Safe response"))
		}
	}))
	defer mockServer.Close()

	vulnDetails, vulnFound := scanner.Scan(mockServer.URL, headers)

	if !vulnFound {
		t.Errorf("Expected SQL Injection vulnerability to be detected, but it wasn't.")
	}

	expectedEndpoint := mockServer.URL + "?input=' OR '1'='1"
	if vulnDetails.Endpoint != expectedEndpoint {
		t.Errorf("Expected endpoint to be '%s', got: %s", expectedEndpoint, vulnDetails.Endpoint)
	}

	expectedPayload := "' OR '1'='1"
	if vulnDetails.Payload != expectedPayload {
		t.Errorf("Expected payload to be '%s', got: %s", expectedPayload, vulnDetails.Payload)
	}
}
