package scanner

import (
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

// XSSScanner checks for Cross-Site Scripting vulnerabilities.
type XSSScanner struct{}

// Scan performs XSS scanning on the target and returns details if a vulnerability is found.
func (x XSSScanner) Scan(target string, headers map[string]string) (VulnerabilityDetails, bool) {
	payload := "<script>alert('XSS')</script>"
	maliciousURL := target + "?input=" + payload

	req, _ := http.NewRequest("GET", maliciousURL, nil)

	// Add headers
	for key, value := range headers {
		req.Header.Add(key, value)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return VulnerabilityDetails{}, false
	}
	defer resp.Body.Close()

	// Read the response body
	body := new(strings.Builder)
	_, err = io.Copy(body, resp.Body)
	if err != nil {
		fmt.Println("Error reading response body:", err)
		return VulnerabilityDetails{}, false
	}

	// Check if the script is reflected in the response
	if strings.Contains(body.String(), payload) {
		// Return the details of the vulnerability
		fmt.Println("XSS vulnerability found at:", maliciousURL)

		return VulnerabilityDetails{
			Type:       "XSS",
			Endpoint:   maliciousURL,
			Payload:    payload,
			DetectedAt: time.Now(),
			Suggestion: "Sanitize user inputs and implement Content Security Policy (CSP) to prevent XSS attacks.",
		}, true
	}

	// No XSS vulnerability detected
	return VulnerabilityDetails{}, false
}
