package scanner

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"strings"
	"io"
)

// TestDirectoryTraversalScanner tests the DirectoryTraversalScanner functionality
func TestDirectoryTraversalScanner(t *testing.T) {
	// Set up a test server that simulates a directory traversal vulnerability
	handler := func(w http.ResponseWriter, r *http.Request) {
		if strings.Contains(r.URL.Query().Get("path"), "../../../../etc/passwd") {
			// Simulate a response containing sensitive data for testing
			io.WriteString(w, "root:x:0:0:root:/root:/bin/bash")
		} else if strings.Contains(r.URL.Query().Get("path"), "..\\..\\..\\..\\windows\\system32\\config") {
			// Simulate another response indicating a Windows directory traversal
			io.WriteString(w, "[boot loader]")
		} else {
			// Normal response for non-vulnerable requests
			io.WriteString(w, "No sensitive files found")
		}
	}

	server := httptest.NewServer(http.HandlerFunc(handler))
	defer server.Close()

	// Create an instance of DirectoryTraversalScanner
	directoryScanner := DirectoryTraversalScanner{}

	// Define test cases
	testCases := []struct {
		target           string
		expectedVuln     bool
		expectedEndpoint string
		expectedPayload  string
	}{
		{server.URL, true, server.URL + "/file?path=../../../../etc/passwd", "../../../../etc/passwd"},
		{server.URL, true, server.URL + "/file?path=..\\..\\..\\..\\windows\\system32\\config", "..\\..\\..\\..\\windows\\system32\\config"},
		{server.URL, false, server.URL + "/file?path=safe-file.txt", "safe-file.txt"},
	}

	for _, tc := range testCases {
		vulnDetails, found := directoryScanner.Scan(tc.target, nil)

		// Assert that vulnerabilities are detected as expected
		if found != tc.expectedVuln {
			t.Errorf("Expected vulnerability: %v, got: %v", tc.expectedVuln, found)
		}

		// If a vulnerability was found, validate the details
		if found {
			if vulnDetails.Endpoint != tc.expectedEndpoint {
				t.Errorf("Expected endpoint: %s, got: %s", tc.expectedEndpoint, vulnDetails.Endpoint)
			}

			if vulnDetails.Payload != tc.expectedPayload {
				t.Errorf("Expected payload: %s, got: %s", tc.expectedPayload, vulnDetails.Payload)
			}

			if vulnDetails.Type != "Directory Traversal" {
				t.Errorf("Expected vulnerability type 'Directory Traversal', got '%s'", vulnDetails.Type)
			}
		}
	}
}
