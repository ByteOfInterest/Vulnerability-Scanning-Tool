package scanner

import (
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

type XSSScanner struct{}

func (x XSSScanner) Scan(target string, headers map[string]string) bool {
	payload := "<script>alert('XSS')</script>"
	maliciousURL := target + "?input=" + payload

	req, _ := http.NewRequest("GET", maliciousURL, nil)

	for key, value := range headers {
		req.Header.Add(key, value)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return false
	}
	defer resp.Body.Close()

	// Use io.Copy to copy the response body to the strings.Builder
	body := new(strings.Builder)
	_, err = io.Copy(body, resp.Body)
	if err != nil {
		fmt.Println("Error reading response body:", err)
		return false
	}

	if strings.Contains(body.String(), payload) {
		fmt.Println("XSS vulnerability found!")

		// Add the vulnerability details
		vulnDetails := VulnerabilityDetails{
			Type:       "XSS",
			Endpoint:   maliciousURL,
			Payload:    payload,
			DetectedAt: time.Now(),
			Suggestion: "Sanitize user inputs and use a Content Security Policy (CSP).",
		}
		AddVulnerability(vulnDetails)
		return true
	}

	return false
}
