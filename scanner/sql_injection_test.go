package scanner

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"time"
)

func TestSQLInjectionScanner(t *testing.T) {
	// Create a SQLInjectionScanner instance
	scanner := &SQLInjectionScanner{}

	// Mock HTTP server
	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		input := r.URL.Query().Get("input")

		if input == "safe_input" {
			w.Write([]byte("Normal response"))
		} else if input == "' OR '1'='1" {
			w.Write([]byte("SQL Injection detected"))
		} else {
			w.Write([]byte("Normal response"))
		}
	}))
	defer mockServer.Close()

	// Call the scanner's Scan method
	vuln, found := scanner.Scan(mockServer.URL, map[string]string{})

	// Verify if the SQL Injection vulnerability was detected
	if !found {
		t.Error("Expected SQL Injection vulnerability to be detected, but it wasn't.")
	}

	if vuln.Type != "SQL Injection" {
		t.Errorf("Expected vulnerability type to be 'SQL Injection', got '%s'", vuln.Type)
	}

	if vuln.Endpoint == "" {
		t.Error("Expected endpoint to be populated but it was empty.")
	}

	if vuln.DetectedAt.After(time.Now()) {
		t.Error("DetectedAt timestamp is incorrect.")
	}

	if vuln.Suggestion == "" {
		t.Error("Expected suggestion to be populated but it was empty.")
	}
}
