package scanner

import (
	"io/ioutil"
	"net/http"
)

// A generic interface for all vulnerability scanners.
type VulnerabilityScanner interface {
	Scan(target string, headers map[string]string) (VulnerabilityDetails, bool)
}

// Global slice to collect detected vulnerabilities
var vulnerabilities []VulnerabilityDetails

// Function to collect vulnerabilities
func AddVulnerability(vuln VulnerabilityDetails) {
	vulnerabilities = append(vulnerabilities, vuln)
}

// Function to retrieve collected vulnerabilities
func GetVulnerabilities() []VulnerabilityDetails {
	return vulnerabilities
}

// Helper function to send HTTP GET requests and return the response body as a string
func sendRequest(url string, headers map[string]string) (string, error) {
	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			if len(via) >= 10 { // limit number of redirects
				return http.ErrUseLastResponse
			}
			return nil
		},
	}

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", err
	}

	// Add any provided headers
	for key, value := range headers {
		req.Header.Add(key, value)
	}

	// Perform the request
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	return string(body), nil
}
