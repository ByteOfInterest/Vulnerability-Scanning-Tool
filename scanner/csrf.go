package scanner

import (
	"net/http"
	"fmt"
)

// CSRFScanner checks for Cross-Site Request Forgery vulnerabilities.
type CSRFScanner struct{}

// Scan performs CSRF scanning on the target
func (c CSRFScanner) Scan(target string, headers map[string]string) bool {
	// Simulate a POST request without a CSRF token
	req, _ := http.NewRequest("POST", target+"/change-password", nil)

	// Add headers but omit CSRF tokens
	for key, value := range headers {
		req.Header.Add(key, value)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return false
	}
	defer resp.Body.Close()

	// Check if the state change was successful without CSRF protection
	if resp.StatusCode == http.StatusOK {
		fmt.Println("CSRF vulnerability found!")
		return true
	}

	return false
}