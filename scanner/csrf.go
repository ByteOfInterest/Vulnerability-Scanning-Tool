package scanner

import (
	"fmt"
	"net/http"
	"time"
)

// CSRFScanner checks for Cross-Site Request Forgery vulnerabilities.
type CSRFScanner struct{}

// Scan performs CSRF scanning on the target
func (c CSRFScanner) Scan(target string, headers map[string]string) (VulnerabilityDetails, bool) {
	// Simulate a POST request without a CSRF token
	req, _ := http.NewRequest("POST", target+"/change-password", nil)

	// Add headers but omit CSRF tokens
	for key, value := range headers {
		req.Header.Add(key, value)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return VulnerabilityDetails{}, false
	}
	defer resp.Body.Close()

	// Check if the state change was successful without CSRF protection
	if resp.StatusCode == http.StatusOK {
		fmt.Println("CSRF vulnerability found!")

		// Create the vulnerability details
		vulnerability := VulnerabilityDetails{
			Type:       "CSRF",
			Endpoint:   target + "/change-password",
			Payload:    "Missing CSRF Token",
			DetectedAt: time.Now(),
			Suggestion: "Ensure that CSRF tokens are implemented and validated for all state-changing actions.",
		}

		// Add the vulnerability to the global list
		AddVulnerability(vulnerability)

		// Return the vulnerability details
		return vulnerability, true
	}

	// No vulnerability detected
	return VulnerabilityDetails{}, false
}
