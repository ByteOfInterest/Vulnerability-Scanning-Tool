package scanner

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestCSRFScanner(t *testing.T) {
	// Set up a test server that simulates a state-changing operation
	handler := func(w http.ResponseWriter, r *http.Request) {
		if r.Method == "POST" && r.URL.Path == "/change-password" {
			// Simulate a vulnerable endpoint that allows state changes without CSRF protection
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Password changed"))
		} else {
			// Simulate protected endpoints
			w.WriteHeader(http.StatusForbidden)
			w.Write([]byte("Forbidden"))
		}
	}

	server := httptest.NewServer(http.HandlerFunc(handler))
	defer server.Close()

	// Create an instance of CSRFScanner
	csrfScanner := CSRFScanner{}

	// Define test cases
	testCases := []struct {
		target           string
		expectedVuln     bool
		expectedEndpoint string
	}{
		{server.URL, true, server.URL + "/change-password"},
	}

	for _, tc := range testCases {
		// Simulate missing CSRF protection
		vulnDetails, found := csrfScanner.Scan(tc.target, nil)
		if found != tc.expectedVuln {
			t.Errorf("Expected vulnerability: %v, got: %v", tc.expectedVuln, found)
		}

		if found && vulnDetails.Endpoint != tc.expectedEndpoint {
			t.Errorf("Expected endpoint: %s, got: %s", tc.expectedEndpoint, vulnDetails.Endpoint)
		}

		if found && vulnDetails.Type != "CSRF" {
			t.Errorf("Expected vulnerability type 'CSRF', got '%s'", vulnDetails.Type)
		}
	}

	// Add a test case where the response does not indicate a CSRF vulnerability
	protectedHandler := func(w http.ResponseWriter, r *http.Request) {
		// Simulate a protected endpoint with CSRF protection
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte("Forbidden"))
	}

	protectedServer := httptest.NewServer(http.HandlerFunc(protectedHandler))
	defer protectedServer.Close()

	// No CSRF vulnerability in this case
	_, found := csrfScanner.Scan(protectedServer.URL, nil)
	if found {
		t.Errorf("Expected no vulnerability, but found one")
	}
}
