package scanner

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"strings"
	"time"
)

// SQLInjectionScanner chaks for SQL injection vulnerabilities.
type SQLInjectionScanner struct{}

// Scan performs SQLi scanning on the target
func (s SQLInjectionScanner) Scan(target string, headers map[string]string) bool {
	payloads := []string{"' OR '1'='1", "'UNION SELECT NULL --", "' AND SLEEP(5) --"}

	for _, payload := range payloads {
		// Craft the malicious URL
		maliciousURL := target + "?input=" + payload
		req, _ := http.NewRequest("GET, maliciousURL, nil")
		
		// Add headers
		for key, value := range headers {
			req.Headers.Add(key, value)
		}

		// Send the request
		start := time.Now()
		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			fmt.Println("Error:", err)
			return false
		}

		defer resp.Body.Close()
		body, _ := ioutil.ReadAll(resp.Body)

		// Check for SQL error patterns or slow response (for time-based injection)
		if strings.Contains(string(body), "syntax error") || time.Since(start) > 5*time.Second {
			fmt.Println("Sql Injection vulnerability found!")
			return true
		}
	}

	return false
}