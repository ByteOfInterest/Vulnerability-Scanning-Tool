package scanner

import (
	"testing"
)

// TestDirectoryTraversalScanner tests the DirectoryTraversalScanner functionality
func TestDirectoryTraversalScanner(t *testing.T) {
    tests := []struct {
        description    string
        payload        string
        expectedVuln   bool
        expectedEndpoint string
        expectedPayload string
    }{
        {
            description:    "Safe file test",
            payload:        "safe-file.txt",
            expectedVuln:   false,
            expectedEndpoint: "http://localhost:8080/file?path=safe-file.txt",
            expectedPayload: "safe-file.txt",
        },
        {
            description:    "Linux directory traversal test",
            payload:        "../../../../etc/passwd",
            expectedVuln:   true,
            expectedEndpoint: "http://localhost:8080/file?path=../../../../etc/passwd",
            expectedPayload: "../../../../etc/passwd",
        },
        {
            description:    "Windows directory traversal test",
            payload:        "..\\..\\..\\..\\windows\\system32\\config",
            expectedVuln:   true,
            expectedEndpoint: "http://localhost:8080/file?path=..\\..\\..\\..\\windows\\system32\\config",
            expectedPayload: "..\\..\\..\\..\\windows\\system32\\config",
        },
    }

    for _, test := range tests {
        t.Run(test.description, func(t *testing.T) {
            scanner := DirectoryTraversalScanner{}
            headers := make(map[string]string)
            vulnDetails, vulnFound := scanner.Scan("http://localhost:8080", headers)

            if vulnFound != test.expectedVuln {
                t.Errorf("Expected vulnerability: %v, got: %v", test.expectedVuln, vulnFound)
            }
            if vulnDetails.Endpoint != test.expectedEndpoint {
                t.Errorf("Expected endpoint: %v, got: %v", test.expectedEndpoint, vulnDetails.Endpoint)
            }
            if vulnDetails.Payload != test.expectedPayload {
                t.Errorf("Expected payload: %v, got: %v", test.expectedPayload, vulnDetails.Payload)
            }
        })
    }
}
